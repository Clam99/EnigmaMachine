public class Rotor {
	private char[] outAlphabet;
	private char stepLetter;
	private int start;
	private boolean isReflector;
	private int[] fwrdShift;
	private int[] bwrdShift;
	private int step;
	private String[] rotor = new String[] { "EKMFLGDQVZNTOWYHXUSPAIBRCJ", "AJDKSIRUXBLHWTMCQGZNPYFVOE",
			"BDFHJLCPRTXVZNYEIWGAKMUSQO", "ESOVPZJAYQUIRHXLNFTGKDCMWB", "VZBRGITYUPSDNHLXAWMJQOFECK" };
	private String[] rflctor = new String[] { "YRUHQSLDPXNGOKMIEBFZCWVJAT", "FVPJIAOYEDRZXWGCTKUQSBNMHL" };
	private char[] turnNotch = new char[] { 'R', 'F', 'W', 'K', 'A' };

	public Rotor(int num, int s, boolean reflect, int ring) { // num:1-5 (1-2 for reflector), s:1-26, r:1-26.
		outAlphabet = new char[26];
		isReflector = reflect;
		if (isReflector) {
			start = 0;// force start to be zero if reflector
			outalphabet = rflctor[num - 1].toCharArray();
		} else {
			start = s;
			String code = rotor[num - 1];
			stepLetter = turnNotch[num - 1];
			code = rotate(code, ring);
			step = (Let2Num(stepLetter) + 25) % 26;
			outAlphabet = code.toCharArray();
		}
		findShift(); // Determine the shift for each letter, both forward and backward.
	}

	public String rotate(String str, int shift) {
		return str.substring(shift) + str.substring(0, shift);
	}

	public void step() { //Step the rotor
		int[] temp = new int[26];
		for (int i = 0; i < 25; i++) {
			temp[i + 1] = fwrdShift[i];
		}
		temp[0] = fwrdShift[25];
		fwrdShift = temp;
		temp = new int[26];
		for (int i = 0; i < 25; i++) {
			temp[i + 1] = bwrdShift[i];
		}
		temp[0] = bwrdShift[25];
		bwrdShift = temp;
		start++;
	}

	public boolean NeedStep() { 
		return (start==step);
	}

	public char getOutput(char c) {
		return Num2Let((Let2Num(c) + fwrdShift[Let2Num(c)]) % 26);
	}

	public char getReversedOutput(char c) {
		return Num2Let((Let2Num(c) + bwrdShift[Let2Num(c)]) % 26);
	}

	private void findShift() {
		for (int i = 0; i < 26; i++) {
			int j = Let2Num(outAlphabet[i]);
			fwrdShift[i] = (26 + j - i) % 26;
			bwrdShift[j] = (26 + i - j) % 26;
		}
	}

	public int Let2Num(char c) {
		return (int) c - 65;
	}

	public char Num2Let(int i) {
		return (char) (i + 65);
	}

}
